"use strict";(self.webpackChunkdata_platform_playbook=self.webpackChunkdata_platform_playbook||[]).push([[606],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5389:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return d}});var r=n(3117),a=n(102),o=(n(7294),n(3905)),i=["components"],l={title:"CI/CD Process",description:"Explaination of the CI/CD process for the Data Platform",tags:["playbook"],layout:"layout"},s=void 0,p={unversionedId:"docs/CI-CD-process",id:"docs/CI-CD-process",title:"CI/CD Process",description:"Explaination of the CI/CD process for the Data Platform",source:"@site/docs/docs/CI-CD-process.md",sourceDirName:"docs",slug:"/docs/CI-CD-process",permalink:"/Data-Platform-Playbook/docs/CI-CD-process",draft:!1,editUrl:"https://github.com/LBHackney-IT/data-platform-playbook/edit/master/docs/docs/CI-CD-process.md",tags:[{label:"playbook",permalink:"/Data-Platform-Playbook/tags/playbook"}],version:"current",frontMatter:{title:"CI/CD Process",description:"Explaination of the CI/CD process for the Data Platform",tags:["playbook"],layout:"layout"},sidebar:"docs",previous:{title:"Module 2 - Developing a simple dashboard",permalink:"/Data-Platform-Playbook/training-modules/Qlik/qlik-module-2"},next:{title:"Ingesting Academy data onto the Data Platform",permalink:"/Data-Platform-Playbook/docs/academy-ingestion"}},c={},d=[{value:"Architecture",id:"architecture",level:2},{value:"Current Process",id:"current-process",level:2},{value:"CI",id:"ci",level:4},{value:"Staging Deployment",id:"staging-deployment",level:4},{value:"Production Deployment",id:"production-deployment",level:4},{value:"To Be Process",id:"to-be-process",level:2},{value:"Staging and Production Deployment",id:"staging-and-production-deployment",level:4}],u={toc:d};function m(e){var t=e.components,l=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,l,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"architecture"},"Architecture"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"CI CD Process",src:n(251).Z,width:"821",height:"1151"})),(0,o.kt)("h2",{id:"current-process"},"Current Process"),(0,o.kt)("h4",{id:"ci"},"CI"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"The CI pipeline is triggered on every push to a branch that is not the ",(0,o.kt)("inlineCode",{parentName:"li"},"main")," code branch"),(0,o.kt)("li",{parentName:"ol"},"Terraform and python scripts are then tested in parallel. For Python the unit tests are executed and for Terraform the source code is linted, validated and then tested using ",(0,o.kt)("inlineCode",{parentName:"li"},"tf lint")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"terraform validate")," commands and then finally a ",(0,o.kt)("inlineCode",{parentName:"li"},"terraform plan")," against Staging")),(0,o.kt)("h4",{id:"staging-deployment"},"Staging Deployment"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"The staging deployment pipeline is triggered on merge of a pull request or commit of code to the ",(0,o.kt)("inlineCode",{parentName:"li"},"main")," code branch of the Data Platform repository"),(0,o.kt)("li",{parentName:"ol"},"Terraform and python scripts are then tested in parallel. For Python the unit tests are executed and for Terraform the source code is linted and then validated using ",(0,o.kt)("inlineCode",{parentName:"li"},"tf lint")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"terraform validate")," commands"),(0,o.kt)("li",{parentName:"ol"},"If the previous steps are successful then a ",(0,o.kt)("inlineCode",{parentName:"li"},"terraform apply")," is executed against the environment")),(0,o.kt)("h4",{id:"production-deployment"},"Production Deployment"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"The production deployment pipeline is triggered on manual creation of a release in the Data Platform repository"),(0,o.kt)("li",{parentName:"ol"},"Terraform and python scripts are then tested in parallel. For Python the unit tests are executed and for Terraform the source code is linted and then validated using ",(0,o.kt)("inlineCode",{parentName:"li"},"tf lint")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"terraform validate")," commands"),(0,o.kt)("li",{parentName:"ol"},"If the previous steps are successful then a ",(0,o.kt)("inlineCode",{parentName:"li"},"terraform apply")," is executed against the environment")),(0,o.kt)("h2",{id:"to-be-process"},"To Be Process"),(0,o.kt)("h4",{id:"staging-and-production-deployment"},"Staging and Production Deployment"),(0,o.kt)("p",null,"In the near future there will be only 1 pipeline that completes the staging and production deployments together instead of 2 different pipelines. The below steps document the intended process"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Pipeline is triggered on merge of a pull request or commit of code to the ",(0,o.kt)("inlineCode",{parentName:"li"},"main")," code branch of the Data Platform repository"),(0,o.kt)("li",{parentName:"ol"},"Terraform and python scripts are then tested in parallel. For Python the unit tests are executed and for Terraform the source code is linted and then validated using ",(0,o.kt)("inlineCode",{parentName:"li"},"tf lint")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"terraform validate")," commands "),(0,o.kt)("li",{parentName:"ol"},"If the previous steps are successful then a ",(0,o.kt)("inlineCode",{parentName:"li"},"terraform apply")," is executed against the Staging environment"),(0,o.kt)("li",{parentName:"ol"},"The pipeline then pauses for a manual approval."),(0,o.kt)("li",{parentName:"ol"},"If the manual approval step is approved then a ",(0,o.kt)("inlineCode",{parentName:"li"},"terraform apply")," is executed against the Production environment")),(0,o.kt)("p",null,"Step 4 could be left out, and the change would flow straight through to production however this is something that may not be wanted"))}m.isMDXComponent=!0},251:function(e,t,n){t.Z=n.p+"assets/images/CI-CD-346db9c941e16cc05e16b006fcb29c93.png"}}]);