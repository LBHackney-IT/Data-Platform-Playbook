"use strict";(self.webpackChunkdata_platform_playbook=self.webpackChunkdata_platform_playbook||[]).push([[5506],{3662:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>d});var o=n(4848),a=n(8453);const i={id:"appendix-prototype-simple-transforms",title:"Appendix - Prototype simple transforms",description:"Onboarding data analysts and engineers to DAP\u21e8flow, the Data Analytics Platform Airflow integration.",layout:"playbook_js",tags:["onboarding"]},s="\ud83d\udc49 Back to \u25ba \ud83d\udcdaPrototype simple transforms",r={id:"dap-airflow/parking/appendix-prototype-simple-transforms",title:"Appendix - Prototype simple transforms",description:"Onboarding data analysts and engineers to DAP\u21e8flow, the Data Analytics Platform Airflow integration.",source:"@site/docs/dap-airflow/parking/appendix-prototype-simple-transforms.md",sourceDirName:"dap-airflow/parking",slug:"/dap-airflow/parking/appendix-prototype-simple-transforms",permalink:"/Data-Platform-Playbook/dap-airflow/parking/appendix-prototype-simple-transforms",draft:!1,unlisted:!1,editUrl:"https://github.com/LBHackney-IT/data-platform-playbook/edit/master/docs/dap-airflow/parking/appendix-prototype-simple-transforms.md",tags:[{inline:!0,label:"onboarding",permalink:"/Data-Platform-Playbook/tags/onboarding"}],version:"current",frontMatter:{id:"appendix-prototype-simple-transforms",title:"Appendix - Prototype simple transforms",description:"Onboarding data analysts and engineers to DAP\u21e8flow, the Data Analytics Platform Airflow integration.",layout:"playbook_js",tags:["onboarding"]}},l={},d=[{value:"How can I use <em><strong>Amazon Athena</strong></em> to prototype a simple <em>table-join</em> data transformation?",id:"how-can-i-use-amazon-athena-to-prototype-a-simple-table-join-data-transformation",level:4},{value:"\ud83d\udcdaAppendix",id:"appendix",level:2},{value:"A. Partition Columns",id:"a-partition-columns",level:3},{value:"B. Conversations about style",id:"b-conversations-about-style",level:3}];function c(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsxs)(t.h1,{id:"-back-to--prototype-simple-transforms",children:["\ud83d\udc49 ",(0,o.jsx)(t.em,{children:"Back to \u25ba"})," ",(0,o.jsx)(t.a,{href:"../parking/prototype-simple-transforms",children:"\ud83d\udcdaPrototype simple transforms"})]})}),"\n",(0,o.jsxs)(t.h4,{id:"how-can-i-use-amazon-athena-to-prototype-a-simple-table-join-data-transformation",children:["How can I use ",(0,o.jsx)(t.em,{children:(0,o.jsx)(t.strong,{children:"Amazon Athena"})})," to prototype a simple ",(0,o.jsx)(t.em,{children:"table-join"})," data transformation?"]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"DAP\u21e8flow",src:n(2925).A+"",width:"572",height:"104"})}),"\n",(0,o.jsx)(t.hr,{}),"\n",(0,o.jsx)(t.h2,{id:"appendix",children:"\ud83d\udcdaAppendix"}),"\n",(0,o.jsx)(t.h3,{id:"a-partition-columns",children:"A. Partition Columns"}),"\n",(0,o.jsxs)(t.p,{children:["Because ",(0,o.jsx)(t.em,{children:"partition column"})," data is not written to the underlying Parquet files in the ",(0,o.jsx)(t.em,{children:"S3 data lake"}),", it is strongly recommended to add a further column ",(0,o.jsx)(t.code,{children:"import_timestamp"})," or ",(0,o.jsx)(t.code,{children:"original_import_date"})," containing the same information in case it was ever necessary to deduce where misplaced, or exported, Parquet files were written to."]}),"\n",(0,o.jsxs)(t.p,{children:["Here are a few ways ",(0,o.jsx)(t.em,{children:"Partition Columns"})," are commonly inserted into transform queries:-"]}),"\n",(0,o.jsxs)(t.p,{children:["a) Generated by the ",(0,o.jsx)(t.em,{children:'"now"'})," variables:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-sql",children:"    CAST(CURRENT_TIMESTAMP AS TIMESTAMP(3)) AS import_timestamp,\n\n    /* Partition columns */\n    FORMAT_DATETIME(CURRENT_DATE, 'yyyy') AS import_year,\n    FORMAT_DATETIME(CURRENT_DATE, 'MM') AS import_month,\n    FORMAT_DATETIME(CURRENT_DATE, 'dd') AS import_day,\n    FORMAT_DATETIME(CURRENT_DATE, 'yyyyMMdd') AS import_date\n"})}),"\n",(0,o.jsxs)(t.p,{children:['"import" is really a misnomer here, since it is theoretically possible to generate these partitions the day after the data was actually ingested. However this still remains the convention, even though it has been suggested to use ',(0,o.jsx)(t.code,{children:"transform_date"}),' or even the "old school" ',(0,o.jsx)(t.code,{children:"generation_date"})," instead. In practice the new ",(0,o.jsx)(t.strong,{children:"DAP\u21e8flow"})," orchestration's triggering of transforms should prevent these ",(0,o.jsx)(t.em,{children:"partition columns"})," being out of alignment. Before ",(0,o.jsx)(t.strong,{children:"DAP\u21e8flow"}),", a scheduler might have still triggered a similar ",(0,o.jsx)(t.em,{children:"Glue ETL job"})," even though the underlying ingestion had failed, leading to some confusion about what the partition data actually meant when it was later queried."]}),"\n",(0,o.jsxs)(t.p,{children:["b) Derived directly from the ",(0,o.jsx)(t.code,{children:"[service raw zone].[parent table] p"}),", for example:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-sql",children:"    p.import_date AS original_import_date,  --\x3e preserved in the Parquet file\n\n    /* Partition columns */\n    p.import_year,\n    p.import_month,\n    p.import_day,\n    p.import_date\n"})}),"\n",(0,o.jsxs)(t.p,{children:["This is the preferred option for many as it makes the most logical sense. But you still might want to capture the ",(0,o.jsx)(t.code,{children:"CURRENT_TIMESTAMP"}),", as in (a) above."]}),"\n",(0,o.jsxs)(t.p,{children:["c) Passed down from ",(0,o.jsx)(t.code,{children:"[service refined zone].[parent table] p"}),", for example:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-sql",children:"    p.import_timestamp,\n    -- This column might be named differently, eg...\n    -- p.ImportDateTime AS import_timestamp, \n\n    /* Partition columns */\n    p.import_year,\n    p.import_month,\n    p.import_day,\n    p.import_date\n"})}),"\n",(0,o.jsxs)(t.p,{children:["Tables in the ",(0,o.jsx)(t.em,{children:"refined zone"})," are themselves products of transforms with partitions. So you would want to align their subsequent down-stream product to them."]}),"\n",(0,o.jsxs)(t.p,{children:["In case ",(0,o.jsx)(t.code,{children:"import_timestamp"})," was called something else or needs casting to a TIMESTAMP you will need to go check ",(0,o.jsx)(t.code,{children:"[service refined zone].[parent table]"})," first!"]}),"\n",(0,o.jsx)(t.hr,{}),"\n",(0,o.jsx)(t.h3,{id:"b-conversations-about-style",children:"B. Conversations about style"}),"\n",(0,o.jsx)(t.p,{children:"\ud83d\udca1Migrating to new technologies or a new platform offers teams the opportunity to raise coding standards and shed those common old habits of the past."}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsx)(t.p,{children:"You have complete freedom over the SQL code formatting however we recommend stacking tables and column expressions, each on their own line. That helps readability and line-by-line debugging. You should endeavour to be consistent in your style and agree on style among your service colleagues. In our examples, we used 4-space tabulation and indent column expressions after the statement, which you are welcome to adopt."}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:["Indentation has no syntactic significance for SQL interpreters so such a practice is purely aesthetic for readability. That is especially true of JOIN statements that not only join the previous table, but join ",(0,o.jsx)(t.em,{children:"everything previous"})," to the table that follows. Further indentation of subsequent JOINs cannot imply nested right-to-left execution of table joins. Beginning every JOIN statement at the left emphasizes the true top-to-bottom execution order. Nesting the execution order can only be achieved using ",(0,o.jsx)(t.em,{children:"bracketed sub-queries"})," which should naturally be indented for readability."]}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:["The use of leading commas is generally not considered compatible with the use of ",(0,o.jsx)(t.code,{children:"-- trailing comments"})," when used in the same SQL script. Because merely auto-reformatting such SQL can easily cause a SQL syntactic failure making it no longer executable. There exists much legacy SQL, from way back last century, that uses leading commas. If the intention is to maintain such SQL, as it is, then you should also consider banning ",(0,o.jsx)(t.code,{children:"-- trailing comments"})," and only allow ",(0,o.jsx)(t.code,{children:"/* encapsulated comments */"}),". Alternately, please use SQL formatting tools to banish those leading commas forever!"]}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:["Everyone disagrees about their favorite SQL formatting style. ",(0,o.jsx)(t.strong,{children:"SQL formatting tools"})," can help us quickly get around that problem. However do beware, SQL formatting tools allow you to keep all your bad habits as well as enforce good habits! And it is all too easy to be swayed by the popularity of some bad habits."]}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:["Are ",(0,o.jsx)(t.em,{children:"all-caps SQL statements"})," considered a redundant practice? Well that depends! This is coming back into fashion to help emphasize SQL code embedded within C or Python code which is more generally lower-case. But People will never agree, so you must decide for yourself, or if there is a consensus among your colleagues, why not just go with that? Just be consistent!"]}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},2925:(e,t,n)=>{n.d(t,{A:()=>o});const o=n.p+"assets/images/DAPairflowFLOWmigration-830611039dd78e60e8911313d6eb9dd4.png"},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>r});var o=n(6540);const a={},i=o.createContext(a);function s(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),o.createElement(i.Provider,{value:t},e.children)}}}]);