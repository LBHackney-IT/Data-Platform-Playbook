"use strict";(self.webpackChunkdata_platform_playbook=self.webpackChunkdata_platform_playbook||[]).push([[5153],{4522:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>d});var a=o(4848),t=o(8453);const i={title:"RingGo data ingestion",description:"Description of the ingestion process for RingGo data",layout:"playbook_js",tags:["playbook"]},s=void 0,r={id:"docs/ringgo-ingestion",title:"RingGo data ingestion",description:"Description of the ingestion process for RingGo data",source:"@site/docs/docs/ringgo-ingestion.md",sourceDirName:"docs",slug:"/docs/ringgo-ingestion",permalink:"/Data-Platform-Playbook/docs/ringgo-ingestion",draft:!1,unlisted:!1,editUrl:"https://github.com/LBHackney-IT/data-platform-playbook/edit/master/docs/docs/ringgo-ingestion.md",tags:[{inline:!0,label:"playbook",permalink:"/Data-Platform-Playbook/tags/playbook"}],version:"current",frontMatter:{title:"RingGo data ingestion",description:"Description of the ingestion process for RingGo data",layout:"playbook_js",tags:["playbook"]},sidebar:"docs",previous:{title:"Redshift - Creating users, databases and exposing data from Glue",permalink:"/Data-Platform-Playbook/docs/redshift"},next:{title:"Tascomi data ingestion",permalink:"/Data-Platform-Playbook/docs/tascomi-ingestion"}},l={},d=[{value:"1. CSV file is downloaded from the RingGo SFTP server",id:"1-csv-file-is-downloaded-from-the-ringgo-sftp-server",level:3},{value:"Running the Lambda manually",id:"running-the-lambda-manually",level:3},{value:"Copying missing data from landing to raw zone in case of a failure",id:"copying-missing-data-from-landing-to-raw-zone-in-case-of-a-failure",level:3},{value:"Failure alerts",id:"failure-alerts",level:3}];function c(e){const n={code:"code",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"This section describes how the RingGo dataset gets ingested into the data platform"}),"\n",(0,a.jsx)(n.h3,{id:"1-csv-file-is-downloaded-from-the-ringgo-sftp-server",children:"1. CSV file is downloaded from the RingGo SFTP server"}),"\n",(0,a.jsx)(n.p,{children:"The company who owns the dataset (RingGo) uploads a csv file containing previous day's data into their SFTP server. The file drop happens every afternoon."}),"\n",(0,a.jsxs)(n.p,{children:["Lambda function called ",(0,a.jsx)(n.code,{children:"sftp-to-s3"})," runs on a schedule in the evening and copies the csv file to ",(0,a.jsx)(n.code,{children:"dataplatform-prod-landing-zone/ringgo/sftp/input/"})," folder in the landing zone."]}),"\n",(0,a.jsxs)(n.p,{children:["On successful download the lambda function starts the ",(0,a.jsx)(n.code,{children:"parking-copy-ringgo-sftp-data-to-raw-job-trigger"})," trigger which kicks off the ETL workflow."]}),"\n",(0,a.jsx)(n.h3,{id:"running-the-lambda-manually",children:"Running the Lambda manually"}),"\n",(0,a.jsx)(n.p,{children:"In case of a failure in the ingestion process the Lambda can be run manually from the console."}),"\n",(0,a.jsx)(n.p,{children:"To run the Lambda manually the following test body can be used in the Lambda console:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'{\n  "DateToImport": "YYYY-MM-DD"\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"DateToImport"})," value determines which file is fetched from the SFTP server. The files are named in ",(0,a.jsx)(n.code,{children:"data_warehouse_-YYYY-MM-DD.csv"})," format, so that can be used to identify the correct file."]}),"\n",(0,a.jsx)(n.p,{children:"Please note that files are uploaded to the server each afternoon and they contain data for previous day, so the files are lacking behind by a day."}),"\n",(0,a.jsx)(n.h3,{id:"copying-missing-data-from-landing-to-raw-zone-in-case-of-a-failure",children:"Copying missing data from landing to raw zone in case of a failure"}),"\n",(0,a.jsx)(n.p,{children:"If for any reason there's a gap in dates in the raw zone data due to ingestion failure the raw to landing copy job has to be run manually."}),"\n",(0,a.jsx)(n.p,{children:"Once the missing data has been ingested to the landing zone please follow these steps:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["Clear the ",(0,a.jsx)(n.code,{children:"dataplatform-{ENVIRONMENT}-raw-zone/parking/ringgo/sftp/"})," folder by deleting all folders and files in there"]}),"\n",(0,a.jsxs)(n.li,{children:["Open the ",(0,a.jsx)(n.code,{children:"Parking copy RingGo SFTP data to raw"})," job in the Glue console"]}),"\n",(0,a.jsx)(n.li,{children:"Reset the bookmark for the job"}),"\n",(0,a.jsxs)(n.li,{children:["Comment out the ",(0,a.jsx)(n.code,{children:"latest_data = get_latest_partitions(data_source)"})," line in the script. Currently on line 27."]}),"\n",(0,a.jsxs)(n.li,{children:["Uncomment the ",(0,a.jsx)(n.code,{children:"# latest_data = data_source"})," line below (28)"]}),"\n",(0,a.jsx)(n.li,{children:"Save the job"}),"\n",(0,a.jsx)(n.li,{children:"Run the job"}),"\n",(0,a.jsx)(n.li,{children:"Revert the changes in steps 4. and 5. and save the job again"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Raw zone should now have the data matching the landing zone"}),"\n",(0,a.jsx)(n.h3,{id:"failure-alerts",children:"Failure alerts"}),"\n",(0,a.jsxs)(n.p,{children:["The Lambda function is configured to send failure alerts to central ",(0,a.jsx)(n.code,{children:"data-platform-lambda-alerts"})," Google space."]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>r});var a=o(6540);const t={},i=a.createContext(t);function s(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);