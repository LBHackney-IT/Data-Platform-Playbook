"use strict";(self.webpackChunkdata_platform_playbook=self.webpackChunkdata_platform_playbook||[]).push([[3272],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=l(n),f=a,m=p["".concat(c,".").concat(f)]||p[f]||u[f]||o;return n?r.createElement(m,i(i({ref:t},d),{},{components:n})):r.createElement(m,i({ref:t},d))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},402:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return u}});var r=n(3117),a=n(102),o=(n(7294),n(3905)),i=["components"],s={id:"ingesting-data-from-apis",title:"Ingesting data from APIs - ADR 009",description:"",tags:["adr"],number:"9","date-issued":"2021-08-16",status:"Accepted"},c=void 0,l={unversionedId:"architecture-decisions/records/ingesting-data-from-apis",id:"architecture-decisions/records/ingesting-data-from-apis",title:"Ingesting data from APIs - ADR 009",description:"",source:"@site/docs/architecture-decisions/records/009-ingesting-data-from-apis.md",sourceDirName:"architecture-decisions/records",slug:"/architecture-decisions/records/ingesting-data-from-apis",permalink:"/Data-Platform-Playbook/architecture-decisions/records/ingesting-data-from-apis",draft:!1,editUrl:"https://github.com/LBHackney-IT/data-platform-playbook/edit/master/docs/architecture-decisions/records/009-ingesting-data-from-apis.md",tags:[{label:"adr",permalink:"/Data-Platform-Playbook/tags/adr"}],version:"current",sidebarPosition:9,frontMatter:{id:"ingesting-data-from-apis",title:"Ingesting data from APIs - ADR 009",description:"",tags:["adr"],number:"9","date-issued":"2021-08-16",status:"Accepted"},sidebar:"docs",previous:{title:"Production Data in Staging - ADR 008",permalink:"/Data-Platform-Playbook/architecture-decisions/records/production-data-in-staging"},next:{title:"Using pytest for verifying PySpark transformations - ADR 010",permalink:"/Data-Platform-Playbook/architecture-decisions/records/using-pytest-for-verifying-pyspark-transformations"}},d={},u=[{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"Considerations",id:"considerations",level:2},{value:"Consequences",id:"consequences",level:2}],p={toc:u};function f(e){var t=e.components,s=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"context"},"Context"),(0,o.kt)("p",null,"The Data Platform currently has no capacity to ingest data from external APIs"),(0,o.kt)("h2",{id:"decision"},"Decision"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"API ingestion",src:n(3410).Z,width:"613",height:"249"})),(0,o.kt)("p",null,"Deploy a Lambda that will call the the required API and save the returned data\nobject into S3, once all the records have been downloaded the lambda will\ntrigger an AWS glue workflow that will convert JSON objects into parquet and\ncrawl the data enabling users to access that form a data catalogue in AWS Athena."),(0,o.kt)("h2",{id:"considerations"},"Considerations"),(0,o.kt)("p",null,"The first ingestion cycle would need to be run on a local machine as the first\ndata ingestion will take a lot longer than the maximum lambda execution time.\nSubsequent ingestion workflows can be run daily to get records that were created\nor updated after the last import."),(0,o.kt)("h2",{id:"consequences"},"Consequences"),(0,o.kt)("p",null,"Users will be able to run reports on data that was previously stored in external\nAPIs."))}f.isMDXComponent=!0},3410:function(e,t,n){t.Z=n.p+"assets/images/api-ingestion-05d269f9edd10084a5a1b51e8c5df6ee.png"}}]);