"use strict";(self.webpackChunkdata_platform_playbook=self.webpackChunkdata_platform_playbook||[]).push([[5018],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>k});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),m=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=m(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=m(a),d=n,k=u["".concat(l,".").concat(d)]||u[d]||c[d]||o;return a?r.createElement(k,s(s({ref:t},p),{},{components:a})):r.createElement(k,s({ref:t},p))}));function k(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,s=new Array(o);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:n,s[1]=i;for(var m=2;m<o;m++)s[m]=a[m];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},7052:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>m});var r=a(7462),n=(a(7294),a(3905));const o={title:"Using Watermarks to Record AWS GLue Job States Between Runs",description:"Use of the watermarks class for recording Glue job states between runs",layout:"playbook_js",tags:["playbook"]},s="Using Watermarks to Record AWS Glue Job States Between Runs",i={unversionedId:"playbook/ingesting-data/using-watermarks-to-record-job-states",id:"playbook/ingesting-data/using-watermarks-to-record-job-states",title:"Using Watermarks to Record AWS GLue Job States Between Runs",description:"Use of the watermarks class for recording Glue job states between runs",source:"@site/docs/playbook/ingesting-data/012-using-watermarks-to-record-job-states.md",sourceDirName:"playbook/ingesting-data",slug:"/playbook/ingesting-data/using-watermarks-to-record-job-states",permalink:"/Data-Platform-Playbook/playbook/ingesting-data/using-watermarks-to-record-job-states",draft:!1,editUrl:"https://github.com/LBHackney-IT/data-platform-playbook/edit/master/docs/playbook/ingesting-data/012-using-watermarks-to-record-job-states.md",tags:[{label:"playbook",permalink:"/Data-Platform-Playbook/tags/playbook"}],version:"current",sidebarPosition:12,frontMatter:{title:"Using Watermarks to Record AWS GLue Job States Between Runs",description:"Use of the watermarks class for recording Glue job states between runs",layout:"playbook_js",tags:["playbook"]},sidebar:"docs",previous:{title:"Tips on writing an API Ingestion script for AWS Lambda",permalink:"/Data-Platform-Playbook/playbook/ingesting-data/tips-on-how-to-write-an-API-Lambda-script"},next:{title:"Guide to testing data quality in Glue Jobs",permalink:"/Data-Platform-Playbook/playbook/transforming-data/guides-to-testing-in-the-platform/data-quality-testing-guide"}},l={},m=[{value:"Example usage",id:"example-usage",level:2}],p={toc:m},u="wrapper";function c(e){let{components:t,...a}=e;return(0,n.kt)(u,(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"using-watermarks-to-record-aws-glue-job-states-between-runs"},"Using Watermarks to Record AWS Glue Job States Between Runs"),(0,n.kt)("p",null,"A common pattern for ingesting data to the data analytics platform is to do an initial full load of any existing data, then incrementally load any change (delta)."),(0,n.kt)("p",null,"Watermarks allow us to capture a check point or state from any previous execution, extract the incremental data since that check point and update this check point ready for the next run. Common attributes for these check points may be a ",(0,n.kt)("em",{parentName:"p"},"last_modified")," field or an ",(0,n.kt)("em",{parentName:"p"},"id")," you know to be sequential in nature. "),(0,n.kt)("p",null,"The data platform provides a DynamoDB table (",(0,n.kt)("em",{parentName:"p"},"glue-watermarks"),") to record these state logs and a python Watermarks class with methods to help interact with it."),(0,n.kt)("h2",{id:"example-usage"},"Example usage"),(0,n.kt)("p",null,"First you need to import the Watermarks class. You can do this using the following statement along with other imports you may be including in your script."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"from scripts.helpers.watermarks import Watermarks\n")),(0,n.kt)("p",null,"You then need to create a watermarks object to interact with underlying DynamoDB table. We do this by passing the table name argument, usually ",(0,n.kt)("em",{parentName:"p"},"glue-watermarks"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'watermarks = Watermarks(table_name="glue-watermarks") \n')),(0,n.kt)("p",null,"Now create a watermark item using the ",(0,n.kt)("em",{parentName:"p"},"create_watermark_item")," method with the job name and id derived from the job and some arbitrary watermark data."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'###The getResolvedOptions method allows us to access the job name and run id from within the Glue job\nfrom awsglue.utils import getResolvedOptions\nargs = getResolvedOptions(sys.argv)\njob_run_id = args["JOB_RUN_ID"]\njob_name = args["JOB_NAME"]\n\nlast_processed_data = "2023-03-16 15:45:00"\nwatermark_item = watermarks.create_watermark_item(job_id=job_name, run_id=job_run_id, latest_data=last_processed_data)\n')),(0,n.kt)("p",null,"This method supports multiple keyword arguments so as well as the latest_data, we might also want to record the number of rows that were processed "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"rows_count = 808\nwatermark_item = watermarks.create_watermark_item(job_id=job_name, run_id=job_run_id, latest_data=last_processed_data, rows_collected=rows_count)\n")),(0,n.kt)("p",null,"We can now add this watermark to the ",(0,n.kt)("em",{parentName:"p"},"glue-watermarks")," table "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"watermarks.add_watermark(watermark_item)\n")),(0,n.kt)("p",null,"The last_processed_data value can now be retrieved for use in a subsequent execution of the Glue job like so"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'most_recent_run_id = watermarks.get_most_recent_run_id(job_id=job_name)\nwatermark = watermarks.get_watermark(job_id=job_name, run_id=most_recent_run_id)\nlast_processed_date = watermark["watermarks"]["last_processed_date"]\n')))}c.isMDXComponent=!0}}]);