"use strict";(self.webpackChunkdata_platform_playbook=self.webpackChunkdata_platform_playbook||[]).push([[7853],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return f}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(r),f=o,m=d["".concat(c,".").concat(f)]||d[f]||u[f]||a;return r?n.createElement(m,i(i({ref:t},p),{},{components:r})):n.createElement(m,i({ref:t},p))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},3654:function(e,t,r){r.r(t),r.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u}});var n=r(3117),o=r(102),a=(r(7294),r(3905)),i=["components"],l={title:"CD Process",description:"Explaination of the CD process for the Data Platform",tags:["playbook"],layout:"layout"},c=void 0,s={unversionedId:"docs/CD-process",id:"docs/CD-process",title:"CD Process",description:"Explaination of the CD process for the Data Platform",source:"@site/docs/docs/CD-process.md",sourceDirName:"docs",slug:"/docs/CD-process",permalink:"/Data-Platform-Playbook/docs/CD-process",draft:!1,editUrl:"https://github.com/LBHackney-IT/data-platform-playbook/edit/master/docs/docs/CD-process.md",tags:[{label:"playbook",permalink:"/Data-Platform-Playbook/tags/playbook"}],version:"current",frontMatter:{title:"CD Process",description:"Explaination of the CD process for the Data Platform",tags:["playbook"],layout:"layout"},sidebar:"docs",previous:{title:"Module 2 - Developing a simple dashboard",permalink:"/Data-Platform-Playbook/training-modules/Qlik/qlik-module-2"},next:{title:"CI Process",permalink:"/Data-Platform-Playbook/docs/CI-process"}},p={},u=[{value:"Current Process",id:"current-process",level:3},{value:"Staging and Production Deployment",id:"staging-and-production-deployment",level:4}],d={toc:u};function f(e){var t=e.components,l=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},d,l,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"CD Process",src:r(1944).Z,width:"751",height:"518"})),(0,a.kt)("h3",{id:"current-process"},"Current Process"),(0,a.kt)("h4",{id:"staging-and-production-deployment"},"Staging and Production Deployment"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Pipeline is triggered on merge of a pull request or commit of code to the ",(0,a.kt)("inlineCode",{parentName:"li"},"main")," code branch of the Data Platform repository"),(0,a.kt)("li",{parentName:"ol"},"Terraform and python scripts are then tested in parallel. For Python the unit tests are executed and for Terraform the source code is linted and then validated using ",(0,a.kt)("inlineCode",{parentName:"li"},"tf lint")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"terraform validate")," commands "),(0,a.kt)("li",{parentName:"ol"},"If the previous steps are successful then a ",(0,a.kt)("inlineCode",{parentName:"li"},"terraform plan")," followed by Terraform compliance checks and then finally a ",(0,a.kt)("inlineCode",{parentName:"li"},"terraform apply")," is executed against the Staging environment"),(0,a.kt)("li",{parentName:"ol"},"The pipeline then pauses for a manual approval."),(0,a.kt)("li",{parentName:"ol"},"If the manual approval step is approved then a ",(0,a.kt)("inlineCode",{parentName:"li"},"terraform plan")," followed by Terraform compliance checks and then finally a ",(0,a.kt)("inlineCode",{parentName:"li"},"terraform apply")," is executed against the Production environment")))}f.isMDXComponent=!0},1944:function(e,t,r){t.Z=r.p+"assets/images/CD-3e565c0d66cb22711413b5542feef251.png"}}]);